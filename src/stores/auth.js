import { defineStore } from 'pinia';
import { authService } from "@/services/authService.js";
import { trendingScheduler } from '@/services/trendingScheduler';

export const useAuthStore = defineStore('auth', {
    state: () => ({
        user: authService.getStoredUser(),
        token: authService.getToken(),
        isAuthenticated: !!authService.getToken(),
        loading: false,
        error: null
    }),

    getters: {
        currentUser: (state) => state.user,
        isLoggedIn: (state) => state.isAuthenticated,
        isAdmin: (state) => state.user?.roles?.includes('ROLE_ADMIN') ?? false,
        userInitials: (state) => {
            if (!state.user?.username) return '?';
            return state.user.username.substring(0, 2).toUpperCase();
        }
    },

    actions: {
        /**
         * Connexion
         */
        async login(credentials) {
            this.loading = true;
            this.error = null;

            console.log('üîê [AUTH STORE] D√©but connexion');
            console.log('üìß Email:', credentials.email);

            try {
                // Appel du service
                const response = await authService.login(credentials);

                console.log('‚úÖ [AUTH STORE] R√©ponse re√ßue:', response);

                // V√©rifier la structure de la r√©ponse
                if (!response) {
                    console.error('‚ùå [AUTH STORE] R√©ponse vide');
                    throw new Error('R√©ponse serveur vide');
                }

                if (!response.success) {
                    console.error('‚ùå [AUTH STORE] √âchec:', response.message);
                    throw new Error(response.message || '√âchec de la connexion');
                }

                if (!response.token) {
                    console.error('‚ùå [AUTH STORE] Token manquant');
                    throw new Error('Token manquant dans la r√©ponse');
                }

                if (!response.user) {
                    console.error('‚ùå [AUTH STORE] User manquant');
                    throw new Error('Donn√©es utilisateur manquantes');
                }

                // Mise √† jour du state
                this.user = response.user;
                this.token = response.token;
                this.isAuthenticated = true;

                console.log('‚úÖ [AUTH STORE] State mis √† jour');
                console.log('üë§ User:', this.user);
                console.log('üîë Token pr√©sent:', !!this.token);
                console.log('‚úÖ isAuthenticated:', this.isAuthenticated);

                // D√©marrer le scheduler seulement si authentifi√©
                if (this.isAuthenticated) {
                    console.log('‚è∞ D√©marrage du scheduler');
                    trendingScheduler.start(5);
                }

                return response;

            } catch (error) {
                console.error('‚ùå [AUTH STORE] Erreur compl√®te:', error);

                // Gestion d√©taill√©e des erreurs
                if (error.response) {
                    console.error('üì° Status HTTP:', error.response.status);
                    console.error('üì° Data:', error.response.data);

                    const status = error.response.status;
                    const serverMessage = error.response.data?.message;

                    switch (status) {
                        case 400:
                            this.error = 'Donn√©es de connexion invalides';
                            break;
                        case 401:
                            this.error = 'Email ou mot de passe incorrect';
                            break;
                        case 403:
                            this.error = 'Acc√®s refus√©';
                            break;
                        case 404:
                            this.error = 'Service non disponible';
                            break;
                        case 429:
                            this.error = 'Trop de tentatives. R√©essayez plus tard';
                            break;
                        case 500:
                        case 502:
                        case 503:
                            this.error = 'Erreur serveur. Veuillez r√©essayer';
                            break;
                        default:
                            this.error = serverMessage || 'Erreur de connexion';
                    }
                } else if (error.request) {
                    console.error('üì° Aucune r√©ponse du serveur');
                    console.error('Request:', error.request);
                    this.error = 'Impossible de contacter le serveur';
                } else {
                    console.error('‚ö†Ô∏è Erreur:', error.message);
                    this.error = error.message || 'Une erreur est survenue';
                }

                // Nettoyer l'√©tat
                this.user = null;
                this.token = null;
                this.isAuthenticated = false;

                throw error;

            } finally {
                this.loading = false;
                console.log('üèÅ [AUTH STORE] Fin login, loading:', this.loading);
            }
        },

        /**
         * Inscription
         */
        async register(userData) {
            this.loading = true;
            this.error = null;

            console.log('üìù [AUTH STORE] D√©but inscription');

            try {
                // Validation c√¥t√© client
                if (!userData.email || !userData.password || !userData.username) {
                    throw new Error('Tous les champs sont requis');
                }

                if (userData.password.length < 6) {
                    throw new Error('Le mot de passe doit contenir au moins 6 caract√®res');
                }

                const response = await authService.register(userData);

                console.log('‚úÖ [AUTH STORE] Inscription r√©ussie:', response);

                // Si inscription avec auto-login
                if (response.success && response.token && response.user) {
                    this.user = response.user;
                    this.token = response.token;
                    this.isAuthenticated = true;

                    // D√©marrer le scheduler
                    trendingScheduler.start(5);
                }

                return response;

            } catch (error) {
                console.error('‚ùå [AUTH STORE] Erreur inscription:', error);

                if (error.response) {
                    const status = error.response.status;
                    const serverMessage = error.response.data?.message;

                    if (status === 409) {
                        this.error = 'Cet email ou nom d\'utilisateur est d√©j√† utilis√©';
                    } else if (status === 400) {
                        this.error = serverMessage || 'Donn√©es invalides';
                    } else {
                        this.error = serverMessage || 'Erreur lors de l\'inscription';
                    }
                } else {
                    this.error = error.message || 'Une erreur est survenue';
                }

                throw error;

            } finally {
                this.loading = false;
            }
        },

        /**
         * D√©connexion
         */
        async logout() {
            console.log('üëã [AUTH STORE] D√©connexion');

            try {
                // Arr√™ter le scheduler
                trendingScheduler.stop();

                // Appeler le backend
                await authService.logout();

            } catch (error) {
                console.error('‚ö†Ô∏è Erreur lors de la d√©connexion:', error);
            } finally {
                // Toujours nettoyer le state
                this.user = null;
                this.token = null;
                this.isAuthenticated = false;
                this.error = null;

                console.log('‚úÖ [AUTH STORE] √âtat nettoy√©');
            }
        },

        /**
         * R√©cup√©ration du profil
         */
        async fetchUserProfile() {
            this.loading = true;
            console.log('üë§ [AUTH STORE] R√©cup√©ration du profil');

            try {
                const user = await authService.getMe();
                this.user = user;
                this.isAuthenticated = true;

                console.log('‚úÖ [AUTH STORE] Profil r√©cup√©r√©:', user);
                return user;

            } catch (error) {
                console.error('‚ùå [AUTH STORE] Erreur profil:', error);
                this.error = error.message;

                // Si √©chec (token invalide), d√©connecter
                await this.logout();
                throw error;

            } finally {
                this.loading = false;
            }
        },

        /**
         * V√©rification du token au d√©marrage
         */
        async checkAuth() {
            console.log('üîç [AUTH STORE] V√©rification auth...');
            console.log('Token pr√©sent:', !!this.token);

            if (this.token) {
                try {
                    await this.fetchUserProfile();

                    // D√©marrer le scheduler si authentifi√©
                    if (this.isAuthenticated) {
                        trendingScheduler.start(5);
                    }
                } catch (error) {
                    console.error('‚ùå Token invalide, d√©connexion');
                    await this.logout();
                }
            } else {
                console.log('‚ÑπÔ∏è Aucun token trouv√©');
            }
        },

        /**
         * R√©initialisation de l'erreur
         */
        clearError() {
            console.log('üßπ [AUTH STORE] Effacement erreur');
            this.error = null;
        }
    }
});