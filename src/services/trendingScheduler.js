import { serieService } from './serieService';

class TrendingScheduler {
    constructor() {
        this.updateInterval = null;
        this.listeners = new Set();
        this.lastUpdate = null;
    }

    /**
     * D√©marrer le scheduler (mise √† jour toutes les 24h)
     */
    start() {
        // V√©rifier imm√©diatement si une mise √† jour est n√©cessaire
        this.checkAndUpdate();

        // V√©rifier toutes les heures si une mise √† jour est n√©cessaire
        this.updateInterval = setInterval(() => {
            this.checkAndUpdate();
        }, 3600000); // 1 heure en ms

        console.log('üìÖ Trending Scheduler d√©marr√©');
    }

    /**
     * Arr√™ter le scheduler
     */
    stop() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('üìÖ Trending Scheduler arr√™t√©');
        }
    }

    /**
     * V√©rifier si une mise √† jour est n√©cessaire
     */
    async checkAndUpdate() {
        const lastUpdateTime = localStorage.getItem('trending_last_update');
        const now = Date.now();

        // Si pas de derni√®re mise √† jour ou si plus de 24h
        if (!lastUpdateTime || now - parseInt(lastUpdateTime) > 86400000) {
            console.log('üîÑ Mise √† jour des tendances...');
            await this.updateTrending();
        }
    }

    /**
     * Forcer une mise √† jour des tendances
     */
    async updateTrending() {
        try {
            const response = await serieService.getTrending(1, 10);

            // Sauvegarder les donn√©es en cache
            localStorage.setItem('trending_cache', JSON.stringify(response.data));
            localStorage.setItem('trending_last_update', Date.now().toString());

            this.lastUpdate = new Date();

            // Notifier tous les listeners
            this.notifyListeners(response.data);

            console.log('‚úÖ Tendances mises √† jour avec succ√®s');
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour tendances:', error);
            throw error;
        }
    }

    /**
     * R√©cup√©rer les tendances (depuis le cache si disponible)
     */
    getTrending() {
        const cached = localStorage.getItem('trending_cache');
        if (cached) {
            return JSON.parse(cached);
        }
        return [];
    }

    /**
     * Ajouter un listener pour les mises √† jour
     */
    addListener(callback) {
        this.listeners.add(callback);

        // Retourner une fonction pour se d√©sabonner
        return () => {
            this.listeners.delete(callback);
        };
    }

    /**
     * Notifier tous les listeners
     */
    notifyListeners(data) {
        this.listeners.forEach(callback => {
            callback(data);
        });
    }

    /**
     * Obtenir la date de derni√®re mise √† jour
     */
    getLastUpdateDate() {
        const timestamp = localStorage.getItem('trending_last_update');
        if (timestamp) {
            return new Date(parseInt(timestamp));
        }
        return null;
    }

    /**
     * Temps avant la prochaine mise √† jour (en ms)
     */
    getTimeUntilNextUpdate() {
        const lastUpdate = this.getLastUpdateDate();
        if (!lastUpdate) return 0;

        const nextUpdate = new Date(lastUpdate.getTime() + 86400000); // +24h
        const now = new Date();

        return Math.max(0, nextUpdate - now);
    }
}

// Instance singleton
export const trendingScheduler = new TrendingScheduler();